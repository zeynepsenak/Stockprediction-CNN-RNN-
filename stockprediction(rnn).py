# -*- coding: utf-8 -*-
"""Stockprediction(RNN).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14nRim5U8-iOl77S2lZXRkW6Llg3yPRDD
"""

#RNN - Stock Prediction 
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#unser data : df
#APPLE stock 
df = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2019-12-17') 
#GOOGLE stock
#df2 = web.DataReader('GOOGL', data_source='yahoo', start='2004-08-01', end='2020-01-01') 
#df = pd.concat([df1,df2])

df #unser data

df.shape #unser data shape

#Visualizieren die Schlusspreisverlauff
plt.figure(figsize=(16,8))
plt.title('_Schlusspreisverlauf_')
plt.plot(df['Close'])
plt.xlabel('Datum',fontsize=18)
plt.ylabel('Schlusspreis USD ($)',fontsize=18)
plt.show()

data_cl = df.filter(['Close']) #Schluss (Close) Column von Daten : data_cl
clset = data_cl.values #numpy array - data_cl : cl_set
training_data_len = math.ceil( len(clset) *.8) #Train Reiheanzahl

training_data_len

#Skalierung zwischen 0-1 
sc = MinMaxScaler(feature_range=(0, 1)) 
sc_data = sc.fit_transform(clset)

sc_data

train_data = sc_data[0:training_data_len  , : ] #scaliertes trainingsset
#Data teilen: x_train und y_train 
x_train=[]
y_train=[]

#61. günün kapanış fiyatını tahmin etmek için önceki 60 günlük veri seti
for i in range(60,len(train_data)):
    x_train.append(train_data[i-60:i, 0]) #x_train : column1: 0-59 , column2: 1-60, column3: 2-61, ... 
    y_train.append(train_data[i, 0]) #y_train : column1: 60, column2: 61, column3: 62, ...
    if i<= 60:  #örnek bir küme (0-59, x_train) ve (60, y_train)
      print(x_train)
      print(y_train)
      print()



#x_train und y_train - numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

#Daten Formen - zu LTSM Form
x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))

x_train.shape #wie ist es zieht aus?

#LSTM Network Modell bauen
model = Sequential()
#50 nöronlu ilk katman - inputu x_train
model.add(LSTM(units=50, return_sequences=True,input_shape=(x_train.shape[1],1)))
#50 nöronlu ikinci katman
model.add(LSTM(units=50, return_sequences=False))
#2 Dense Katman 1.:25, 2.:1 
model.add(Dense(units=25))
model.add(Dense(units=1))

#Compile => optimizer:adam loss:ortalama kara hatası
model.compile(optimizer='adam', loss='mean_squared_error')

#Train das Modell
model.fit(x_train, y_train, batch_size=1, epochs=10)

#Test Daten
test_data = sc_data[training_data_len - 60: , : ]
#x_test und y_test Daten
x_test = []
y_test =  clset[training_data_len : , : ]
for i in range(60,len(test_data)):
    x_test.append(test_data[i-60:i,0])

y_test.shape

#x_test zu numpy array 
x_test = np.array(x_test)

#Daten Formen - zu LTSM Form
x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))

x_test.shape

#Vorhergesagte Preis Werte Model
predictions = model.predict(x_test) 
predictions = sc.inverse_transform(predictions)#Undo Skalierung

#RMSE Wert - Perfektion des Modells - (Perfekt:0)
rmse=np.sqrt(np.mean(((predictions- y_test)**2)))
rmse

#Plot/Create the data for the graph
train = data_cl[:training_data_len]
valid = data_cl[training_data_len:]
valid['Predictions'] = predictions

#Graph
plt.figure(figsize=(16,8))
plt.title('_Aktienprognose_')
plt.xlabel('Datum', fontsize=18)
plt.ylabel('Schluss Preis USD ($)', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Wert', 'Vorhergesagte Werte'], loc='lower right')
plt.show()

#Schluss Werte und vorhergesagte Werte
valid

#Get the quote
#APPLE
apple_quote = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2019-12-17')
#GOOGLE
#google_quote = web.DataReader('AAPL', data_source='yahoo', start='2004-08-01', end='2020-01-01')
#Create a new dataframe
new_df = apple_quote.filter(['Close'])
#Letzte 60 Tagen Schlusspreis 
letzte_60 = new_df[-60:].values
#Skalieren 0-1
letzte_60_sc = sc.transform(letzte_60)


X_test = []
X_test.append(letzte_60_sc)
#numpy array
X_test = np.array(X_test)
#Datenformung
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
#vorhergesagte Werte
pred_price = model.predict(X_test)
#undo Skalierung
pred_price = sc.inverse_transform(pred_price)
print(pred_price)

#Get the quote
apple_quote2 = web.DataReader('AAPL', data_source='yahoo', start='2019-12-18', end='2019-12-18')
print(apple_quote2['Close'])

